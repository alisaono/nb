#!/usr/bin/env node

/**
 * Module dependencies.
 */
const donenv = require('dotenv');
const app = require('../app');
const debug = require('debug')('fritter-starter:server');
const https = require('https');
const fs = require('fs');
let socketapi = require("../socketapi");
const tls = require("tls");

donenv.config();

const nb2Ctx = tls.createSecureContext({
  key: fs.readFileSync(process.env.NODE_ENV === 'production' ? process.env.SSL_KEY || './privkey.pem' : './dev_ssl_cert/key.pem'),
  cert:fs.readFileSync(process.env.NODE_ENV === 'production' ? process.env.SSL_CERT || './cert.pem' : './dev_ssl_cert/cert.pem'),
  ca:  fs.readFileSync(process.env.NODE_ENV === 'production' ? process.env.SSL_CA || './chain.pem' : './dev_ssl_cert/cert.pem'),
})

const nbCtx = tls.createSecureContext({
  key: fs.readFileSync(process.env.NB_SSL_KEY || './dev_ssl_cert/key.pem'),
  cert:fs.readFileSync(process.env.NB_SSL_CERT || './dev_ssl_cert/cert.pem'),
  ca:  fs.readFileSync(process.env.NB_SSL_CA || './dev_ssl_cert/cert.pem'),
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTPs server.
 */
const server = https.createServer({SNICallback: (servername, cb) => {
  let ctx = nb2Ctx

  if (servername === 'nb.mit.edu') {
    ctx = nbCtx
  }

  if (cb) {
    cb(null, ctx);
  } else {
    return ctx;
  }
  
} }, app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Listening on ${bind}`);
}


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
socketapi.io.attach(server, options = {
  cors: true,
}); // used for socket.io
server.on('error', onError);
server.on('listening', onListening);
